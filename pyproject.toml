[build-system]
requires = ["setuptools>=64", "wheel", "pybind11>=2.11.1"]
build-backend = "setuptools.build_meta"

[project]
name = "bitcoin-datapipeline"
version = "1.0.0"
description = "Real-time Bitcoin price prediction service with 10-second ahead predictions"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Bitcoin Pipeline Team", email = "team@bitcoin-pipeline.com"}
]
maintainers = [
    {name = "Bitcoin Pipeline Team", email = "team@bitcoin-pipeline.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    # Core dependencies are installed from individual service requirements.txt files
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.11.1",
    "pytest-cov>=4.1.0",
    # Code quality
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.3",
]

[project.urls]
"Homepage" = "https://github.com/bitcoin-pipeline/bitcoin-datapipeline"
"Bug Reports" = "https://github.com/bitcoin-pipeline/bitcoin-datapipeline/issues"
"Source" = "https://github.com/bitcoin-pipeline/bitcoin-datapipeline"
"Documentation" = "https://github.com/bitcoin-pipeline/bitcoin-datapipeline/tree/main/docs"

[tool.setuptools.packages.find]
where = ["src"]
include = ["bitcoin_datapipeline*"]

[tool.setuptools.package-data]
"bitcoin_datapipeline" = ["*.yaml", "*.yml", "*.json", "*.avsc"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*", "check_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--no-header",
    "-ra"
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests that take >5 seconds",
    "api: Tests that require external API access",
]
norecursedirs = [
    ".git",
    ".tox",
    "dist",
    "build",
    "*.egg",
    "venv",
    ".venv",
    "__pycache__",
    ".pytest_cache",
    "depreceated-ingestor",
]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | depreceated-ingestor
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "redis.*",
    "websockets.*",
    "aiohttp.*",
    "avro.*",
    "fastavro.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]